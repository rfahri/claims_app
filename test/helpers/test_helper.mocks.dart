// Mocks generated by Mockito 5.4.6 from annotations
// in claims_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i17;

import 'package:claims_app/core/errors/failure.dart' as _i7;
import 'package:claims_app/features/claims/data/data_sources/claims_data_sources.dart'
    as _i9;
import 'package:claims_app/features/claims/data/models/claim_model.dart'
    as _i10;
import 'package:claims_app/features/claims/domain/entities/claim.dart' as _i8;
import 'package:claims_app/features/claims/domain/repositories/claim_repository.dart'
    as _i3;
import 'package:claims_app/features/claims/domain/usecase/claim_usecase.dart'
    as _i4;
import 'package:claims_app/features/claims/presentation/cubit/claim_cubit.dart'
    as _i11;
import 'package:claims_app/features/claims/presentation/cubit/claim_state.dart'
    as _i5;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i16;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:flutter_modular/src/presenter/models/modular_navigator.dart'
    as _i13;
import 'package:flutter_modular/src/presenter/models/route.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClaimRepository_1 extends _i1.SmartFake
    implements _i3.ClaimRepository {
  _FakeClaimRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetClaimsUseCase_2 extends _i1.SmartFake
    implements _i4.GetClaimsUseCase {
  _FakeGetClaimsUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClaimState_3 extends _i1.SmartFake implements _i5.ClaimState {
  _FakeClaimState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ClaimRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClaimRepository extends _i1.Mock implements _i3.ClaimRepository {
  MockClaimRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>> getClaims() =>
      (super.noSuchMethod(
            Invocation.method(#getClaims, []),
            returnValue:
                _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>>.value(
                  _FakeEither_0<_i7.Failure, List<_i8.Claim>>(
                    this,
                    Invocation.method(#getClaims, []),
                  ),
                ),
          )
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>>);
}

/// A class which mocks [GetClaimsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetClaimsUseCase extends _i1.Mock implements _i4.GetClaimsUseCase {
  MockGetClaimsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ClaimRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeClaimRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ClaimRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>>.value(
                  _FakeEither_0<_i7.Failure, List<_i8.Claim>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Claim>>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.ClaimModel>> getClaims() =>
      (super.noSuchMethod(
            Invocation.method(#getClaims, []),
            returnValue: _i6.Future<List<_i10.ClaimModel>>.value(
              <_i10.ClaimModel>[],
            ),
          )
          as _i6.Future<List<_i10.ClaimModel>>);
}

/// A class which mocks [ClaimCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockClaimCubit extends _i1.Mock implements _i11.ClaimCubit {
  MockClaimCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetClaimsUseCase get getClaims =>
      (super.noSuchMethod(
            Invocation.getter(#getClaims),
            returnValue: _FakeGetClaimsUseCase_2(
              this,
              Invocation.getter(#getClaims),
            ),
          )
          as _i4.GetClaimsUseCase);

  @override
  _i5.ClaimState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeClaimState_3(this, Invocation.getter(#state)),
          )
          as _i5.ClaimState);

  @override
  _i6.Stream<_i5.ClaimState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i5.ClaimState>.empty(),
          )
          as _i6.Stream<_i5.ClaimState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> fetchClaims() =>
      (super.noSuchMethod(
            Invocation.method(#fetchClaims, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void emit(_i5.ClaimState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i12.Change<_i5.ClaimState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [IModularNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModularNavigator extends _i1.Mock implements _i13.IModularNavigator {
  MockIModularNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  List<_i15.ParallelRoute<dynamic>> get navigateHistory =>
      (super.noSuchMethod(
            Invocation.getter(#navigateHistory),
            returnValue: <_i15.ParallelRoute<dynamic>>[],
          )
          as List<_i15.ParallelRoute<dynamic>>);

  @override
  _i6.Future<T?> push<T extends Object?>(_i16.Route<T>? route) =>
      (super.noSuchMethod(
            Invocation.method(#push, [route]),
            returnValue: _i6.Future<T?>.value(),
          )
          as _i6.Future<T?>);

  @override
  _i6.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #popAndPushNamed,
              [routeName],
              {#result: result, #arguments: arguments, #forRoot: forRoot},
            ),
            returnValue: _i6.Future<T?>.value(),
          )
          as _i6.Future<T?>);

  @override
  _i6.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushNamed,
              [routeName],
              {#arguments: arguments, #forRoot: forRoot},
            ),
            returnValue: _i6.Future<T?>.value(),
          )
          as _i6.Future<T?>);

  @override
  _i6.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    bool Function(_i16.Route<dynamic>)? predicate, {
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushNamedAndRemoveUntil,
              [newRouteName, predicate],
              {#arguments: arguments, #forRoot: forRoot},
            ),
            returnValue: _i6.Future<T?>.value(),
          )
          as _i6.Future<T?>);

  @override
  _i6.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
    bool? forRoot = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #pushReplacementNamed,
              [routeName],
              {#result: result, #arguments: arguments, #forRoot: forRoot},
            ),
            returnValue: _i6.Future<T?>.value(),
          )
          as _i6.Future<T?>);

  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
    Invocation.method(#pop, [result]),
    returnValueForMissingStub: null,
  );

  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);

  @override
  _i6.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
            Invocation.method(#maybePop, [result]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  void popUntil(bool Function(_i16.Route<dynamic>)? predicate) =>
      super.noSuchMethod(
        Invocation.method(#popUntil, [predicate]),
        returnValueForMissingStub: null,
      );

  @override
  void navigate(String? path, {dynamic arguments}) => super.noSuchMethod(
    Invocation.method(#navigate, [path], {#arguments: arguments}),
    returnValueForMissingStub: null,
  );

  @override
  void setObservers(List<_i16.NavigatorObserver>? navigatorObservers) =>
      super.noSuchMethod(
        Invocation.method(#setObservers, [navigatorObservers]),
        returnValueForMissingStub: null,
      );

  @override
  void setNavigatorKey(_i16.GlobalKey<_i16.NavigatorState>? navigatorkey) =>
      super.noSuchMethod(
        Invocation.method(#setNavigatorKey, [navigatorkey]),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i17.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i17.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );
}
